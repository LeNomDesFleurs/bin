#!/usr/bin/env bash

PLUGIN_NAME=$2
DEVELOPER_ID=$3
IDENTIFIER=$4
VERSION=$5

SYSTEM_PATH=/Library/Audio/Plug-Ins/Components/
AU_SYSTEM_PATH=/Library/Audio/Plug-Ins/Components/"$PLUGIN_NAME".component
AU_USER_PATH=~/Library/Audio/Plug-Ins/Components/"$PLUGIN_NAME".component
VST3_SYSTEM_PATH=/Library/Audio/Plug-Ins/VST3/"$PLUGIN_NAME".vst3
VST3_USER_PATH=~/Library/Audio/Plug-Ins/VST3/"$PLUGIN_NAME".vst3

# FORMATING VARIABLE
bold=$(tput bold)
# italic=$(tput italic)
normal=$(tput sgr0)
red='\033[0;31m'   #'0;31' is Red's ANSI color code
green='\033[0;32m'   #'0;32' is Green's ANSI color code
yellow='\033[1;32m'   #'1;32' is Yellow's ANSI color code
blue='\033[0;34m'   #'0;34' is Blue's ANSI color code
    RED='\033[0;31m'
NOCOLOR='\033[0m'

usage () {
    echo ''
    echo Usage: script "${bold}delete${normal} | ${bold}probe${normal} | ${bold}distribute${normal}" Plugin_name_without_extension
    echo ''
    echo ${bold}delete${normal} tries to delete au and vst3 version of the plugin in system and user library
    echo ''
    echo ${bold}probe${normal} check if plugin exists in au and vst3 version in system and user library
    echo ''
    echo ${bold}distribute${normal} codesign and package a plugin in user library, for more info use 
    echo -e "   ${RED}> plugin distribute --help${NOCOLOR}"
}

plugin_is_not_found(){
if [ ! -d "$AU_USER_PATH" ] && [ ! -d "$AU_SYSTEM_PATH" ] && [ ! -d "$VST3_SYSTEM_PATH" ] && [ ! -d "$VST3_USER_PATH" ]; then
    echo ""
    echo "❌ plugin not found"
    return 1
else
    return 0
fi
}

delete() {

if ! plugin_is_not_found; then
    return 
fi

rm -rfv ${AU_USER_PATH}

if rm -rfv ${AU_USER_PATH}; then
    # echo "🗑️ AU deleted in user 👤 library"
fi
if rm -rfv ${AU_SYSTEM_PATH}; then
    # echo "🗑️ AU deleted in system 💻 library"
fi
if rm -rfv ${VST3_USER_PATH}; then
    # echo "🗑️ VST3 deleted in user 👤 library"
fi
if rm -rfv ${VST3_SYSTEM_PATH}; then
    # echo "🗑️ VST3 deleted in system 💻 library"
fi    

}

probe() {

if ! plugin_is_not_found; then
return
fi
        
echo ''
if [ -d "$AU_USER_PATH" ]; then
    echo "✅ AU found in user 👤 library"
fi

if [ -d "$AU_SYSTEM_PATH" ]; then
    echo "✅ AU found in system 💻 library"
fi

if [ -d "$VST3_USER_PATH" ]; then   
    echo "✅ VST3 found in user 👤 library"
fi

if [ -d "$VST3_SYSTEM_PATH" ]; then
    echo "✅ VST3 found in system 💻 library"
fi

}

distribute-helper(){
    echo ""
echo "==========================================================================="
echo "         Code signing and notarisation script                              "
echo "==========================================================================="
echo "    The script will package AU and VST in your 👤 user library    "
echo "    Use ${RED}plugin probe pluginname${NOCOLOR} to verify they exist      "
echo "                                                                     "
echo "    Usage:                                                             "
echo "    plugin distribute PluginName DeveloperId Identifier Version      "
echo "    Exemple:                                                            "
echo "    plugin distribute Synthy \"Jon Doe (53B7GD2XBM)\" com.Doe.name 1.0.1"
echo "                                                                       "
echo "    PluginName = without any extension - will try to pkgs VST/VST3/AU "
echo "    Developer ID = \"Your Name (NNNNNNNNNN)\"                           "
echo "    Identifier  = com.MyCompany.pluginname                                "
echo "    Version  = version number, e.g 1.0.1                         "
echo "                                                                        "
echo "    The installer will be found in your current directory                 "
echo "    you can pass --dont-clean to see the intermediate package            "
echo "==========================================================================="
echo ""
}

distribute () {
local CLEAN=true
    
    shift

while getopts "h:-help:-dont-clean:v" option; do
  case $option in
    -dont-clean)
      CLEAN=false
      ;;
    h)
    distribute-helper
    exit 0
    ;;
    -help)
    distribute-helper
    exit 0
    ;;
    v)
    VERBOSE = 1
    ;;
  esac
done

if [[ $# -lt 4 ]]; then
    echo "Error: Illegal number of parameters..."
    echo ""
    exit
fi

if ! plugin_is_not_found; then
    return 
fi

# echo "$VERBOSE";

# sign the AU binary
if codesign -s "Developer ID Application: $DEVELOPER_ID" --timestamp --force -o runtime -i "$AU_USER_PATH" "$AU_USER_PATH"/Contents/MacOS/"$PLUGIN_NAME"; then #--options=runtime
    echo "✅ 🔏 AU codesigned"
else
    echo "❌ 🔏 Failed AU codesigning"
    return
fi
# package the .content and sign it
if pkgbuild --install-location "$AU_SYSTEM_PATH" --sign "Developer ID Installer: $DEVELOPER_ID" --timestamp --identifier "$IDENTIFIER"au --component "$AU_USER_PATH" "$PLUGIN_NAME"_au.pkg; then
    echo "✅ 📦 AU packaged"
else
    echo "❌ 📦 Failed AU packaging"
    return
fi 
# sign the VST binary
if codesign -s "Developer ID Application: $DEVELOPER_ID" --timestamp --force -o runtime -i "$VST3_USER_PATH" "$VST3_USER_PATH"/Contents/MacOS/"$PLUGIN_NAME"; then  #--options=runtime
    echo "✅ 🔏 VST3 codesigned"
else
    echo "❌ 🔏 Failed VST3 codesigning"
    return
fi
# package the .vst3 and sign it
if pkgbuild --install-location "$VST3_SYSTEM_PATH" --sign "Developer ID Installer: $DEVELOPER_ID" --timestamp --identifier "$IDENTIFIER"vst3 --version "$VERSION" --component "$VST3_USER_PATH" "$PLUGIN_NAME"_vst3.pkg; then
    echo "✅ 📦 VST3 packaged"
else
    echo "❌ 📦 Failed VST3 packaging"
    return
fi 
# prepare the installer
if productbuild --synthesize --package "$PLUGIN_NAME"_au.pkg --package "$PLUGIN_NAME"_vst3.pkg distribution.xml; then
    echo "✅ ⚙️ Installer prepared"
else 
    echo "❌ ⚙️ Failed installer preparation"
    return
fi
# build the installer
if productbuild --distribution distribution.xml --resources Resources/ "$PLUGIN_NAME".pkg; then
    echo "✅ ⬇️ Installer made"
else
    echo "❌ ⬇️ Failed installer construction"
    return
fi
# Sign the installer
if productsign --sign "Developer ID Installer: $DEVELOPER_ID" "$PLUGIN_NAME".pkg "$PLUGIN_NAME"_installer.pkg --timestamp; then
    echo "✅ 🔏 Installer signed"
else 
    echo "❌ 🔏 Failed installer signature"
    return
fi
# notarize the installer for gatekeeper
if xcrun notarytool submit --keychain-profile "thomas" "$PLUGIN_NAME"_installer.pkg --wait; then
    echo "✅ 👮 Apple validate signature"
else
    echo "❌ 👮 Failed notarization"
    return
fi
# staple the ticket to the installer
if xcrun stapler staple "$PLUGIN_NAME"_installer.pkg; then
    echo "✅ 📎 Stapling worked"
else 
    echo "❌ 📎 Failed Stapling"
fi

if [ $CLEAN ]
then
# clean
rm distribution.xml
rm "$PLUGIN_NAME".pkg
rm "$PLUGIN_NAME"_au.pkg
rm "$PLUGIN_NAME"_vst3.pkg
fi
}

# Associative array where we specify available entry points
declare -A COMMANDS=(
    [main]=usage
    [delete]=delete
    [probe]=probe
    [distribute]=distribute
)

# echo if declare -A: invalid option - update bash

# Magic line that makes it all working
"${COMMANDS[${1:-main}]:-${COMMANDS[main]}}" "$@"